!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -std=c99 -g -c$/;"	m
COBJS	Makefile	/^COBJS = linklist.o linkstack.o compute.o$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = -Wall -std=c99 -g -o$/;"	m
LinkList	linklist.h	/^typedef void LinkList;$/;"	t
LinkListNode	linklist.h	/^typedef struct _tag_LinkListNode LinkListNode;$/;"	t	typeref:struct:_tag_LinkListNode
LinkList_Clear	linklist.c	/^void LinkList_Clear(LinkList* list) {$/;"	f
LinkList_Create	linklist.c	/^LinkList* LinkList_Create() {$/;"	f
LinkList_Delete	linklist.c	/^LinkListNode* LinkList_Delete(LinkList* list, int pos) {$/;"	f
LinkList_Destory	linklist.c	/^void LinkList_Destory(LinkList* list) {$/;"	f
LinkList_Get	linklist.c	/^LinkListNode* LinkList_Get(LinkList* list, int pos) {$/;"	f
LinkList_Insert	linklist.c	/^int LinkList_Insert(LinkList* list, LinkListNode* node, int pos) {$/;"	f
LinkList_Length	linklist.c	/^int LinkList_Length(LinkList* list) {$/;"	f
LinkStack	linkstack.h	/^typedef void LinkStack;$/;"	t
LinkStack_Clear	linkstack.c	/^void LinkStack_Clear(LinkStack* stack) {$/;"	f
LinkStack_Create	linkstack.c	/^LinkStack* LinkStack_Create() {$/;"	f
LinkStack_Destroy	linkstack.c	/^void LinkStack_Destroy(LinkStack* stack) {$/;"	f
LinkStack_Pop	linkstack.c	/^void* LinkStack_Pop(LinkStack* stack) {$/;"	f
LinkStack_Push	linkstack.c	/^int LinkStack_Push(LinkStack* stack, void* item) {$/;"	f
LinkStack_Size	linkstack.c	/^int LinkStack_Size(LinkStack* stack) {$/;"	f
LinkStack_Top	linkstack.c	/^void* LinkStack_Top(LinkStack* stack) {$/;"	f
MAXLEN	transfrom.c	4;"	d	file:
TLinkList	linklist.c	/^} TLinkList;$/;"	t	typeref:struct:_tag_LinkList	file:
TLinkStackNode	linkstack.c	/^} TLinkStackNode;$/;"	t	typeref:struct:_tag_LinkStackNode	file:
TOBJS	Makefile	/^TOBJS = linklist.o linkstack.o transfrom.o$/;"	m
_LINKLIST_H_	linklist.h	2;"	d
_LINKSTACK_H_	linkstack.h	2;"	d
_tag_LinkList	linklist.c	/^typedef struct _tag_LinkList {$/;"	s	file:
_tag_LinkListNode	linklist.h	/^struct _tag_LinkListNode{$/;"	s
_tag_LinkStackNode	linkstack.c	/^typedef struct _tag_LinkStackNode {$/;"	s	file:
header	linklist.c	/^    LinkListNode header;$/;"	m	struct:_tag_LinkList	file:
header	linkstack.c	/^    LinkListNode header;$/;"	m	struct:_tag_LinkStackNode	file:
isDigit	transfrom.c	/^int isDigit(char c) {$/;"	f
isOpertor	transfrom.c	/^int isOpertor(char c) {$/;"	f
item	linkstack.c	/^    void* item;$/;"	m	struct:_tag_LinkStackNode	file:
length	linklist.c	/^    int length;$/;"	m	struct:_tag_LinkList	file:
main	compute.c	/^int main(){$/;"	f
main	transfrom.c	/^int main(int argc, char *argv[]) {$/;"	f
next	linklist.h	/^	LinkListNode* next;$/;"	m	struct:_tag_LinkListNode
priority	transfrom.c	/^int priority(char c) {$/;"	f
transfrom	transfrom.c	/^void transfrom(char* s, char a[]) {$/;"	f
